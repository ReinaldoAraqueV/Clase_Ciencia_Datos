# -*- coding: utf-8 -*-
"""Actividad_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a11rtqTyBNvGuzI5EcjDk1rLg8HLd7hM

# **Preparacion** **Dataset**

## De los dataset propuestos por el docente, escogimos el relacionado con el cáncer de mama, el cual una vez descargado de la página web https://www.kaggle.com/datasets/yasserh/breast-cancer-dataset, procedemos a descomprimir y cargar en el drive para facilitar su consulta y manipulación, a continuación con el siguiente código procederemos a dar acceso al Google Drive.
"""

# Acceso a drive
from google.colab import drive
drive.mount('/content/drive')

"""
# Importación de Librerías y Cargue Dataset
## Posterior a tener acceso al Drive donde está almacenado el dataset, se accede a la ubicación del dataset, que para este caso es un archivo con extensión .csv y lo cargamos a la variable ds. También importamos la librería de pandas para la manipulación de los datos.  """

# importacion librerias
import pandas as pd

# cargue dataset
dataset_path = '/content/drive/My Drive/Colab Notebooks/breast-cancer.csv'
ds = pd.read_csv(dataset_path)

"""# Verificación de Cargue Dataset
## Con la siguiente línea de código, verificamos el cargue correcto de los datos del dataset
"""

# informacion primeras filas
ds.head()

"""# Exploración inicial de datos
## Se realiza la descripcion de las columnas y los tipos de datos que que contiene cada una de ellas, en donde se observa que son en total 32 columnas y  569 filas. Como tipos de datos estan int64 para el id, object para columna diagnosis y float64 para las demás características del tumor.

## Las primeras columnas incluyen id, diagnosis, y características como radius_mean, texture_mean, perimeter_mean, entre otros. La columna diagnosis es del tipo object, indicando si el diagnóstico es maligno o benigno (M o B), mientras que el resto de las columnas representan características numéricas.
"""

# Información sobre columnas y tipos de datos
ds.info()

"""# Estadísticas descriptivas básicas
## Utilizando la siguiente línea de código, ejecuta estadísticas básicas que incluyen conteo, promedio (mean), desviación estándar (std), valores mínimo y máximo, así mismo los cuartiles para cada columna numérica. Esto proporciona una visión general de la distribución de cada característica.
"""

# Estadisticas basicas del dataset
ds.describe()

"""# Transformaciones necesarias para limpiar y preparar los datos
## Se utiliza la función `isnull()` para verificar si hay valores faltantes en el dataset, en donde los resultados nos indican que no hay valores nulos o faltantes.
"""

# Verificacion de datos faltantes o nulos
ds.isnull().sum()

"""## Se realiza la eliminación de la columna "id", el cual por ser un identificador no proporciona información relevante para el análisis, por lo que se procederá a eliminarla."""

# Eliminar la columna
ds_cleaned = ds.drop(columns=['id'])

"""## Transformación de los valores de la columna “diagnosis”, con el fin de convertir estos valores en datos numéricos, tomando 0 para benigno y 1 para maligno, con el fin de facilitar el análisis."""

# Cambio de valores columna
ds_cleaned['diagnosis'] = ds_cleaned['diagnosis'].map({'M': 1, 'B': 0})

"""## Por último, vamos a realizar una normalización de los datos para las características numéricas, con el fin de que estén en una escala similar."""

# importacion libreria
# datos a escala similar
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numeric_columns = ds_cleaned.columns.drop('diagnosis')
ds_cleaned[numeric_columns] = scaler.fit_transform(ds_cleaned[numeric_columns])

"""# Dataset normalizado y limpio
## Finalmente se verifica las correcciones realizadas al dataset, con el fin de corroborar aquellas modificaciones realizadas para su mejor analisis
"""

# verificacion cambios realizados
ds_cleaned.head()

"""# Correlación entre Variables
## A continuacion usaremos la función corr para explorar la correlación que existe entre las variables que contiene el dataset. Esto nos dará una matriz que muestra la correlación entre cada par de variables.
"""

import seaborn as sns
import matplotlib.pyplot as plt

# Importacion de librerias necesarias
# aplicacion de funcion para correlacion

correlation_matrix = ds_cleaned.corr(numeric_only=True)
plt.figure(figsize=(8,7))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

"""# Distribución de Variables
## A continuación exploraremos la distribución de las variables de las columnas, lo que nos arroja un histograma para cada columna numérica en el Dataset, lo cual nos permite analizar qué tipo de variable objetivo, distribución tiene cada columna, variables correlacionadas, no correlacionadas, continuas, discretas o categóricas


"""

#
ds_cleaned.hist(figsize=(10, 10))
plt.show()